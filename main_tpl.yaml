path: main.go
update_behavior:
  type: skip
body: |-
  // Code generated by kitex {{.Version}}, Customize by suyiiyii at https://github.com/suyiiyii/cwgo-template
  package main

  import (
    "net"
    "time"

    "github.com/cloudwego/kitex/pkg/klog"
    "github.com/cloudwego/kitex/pkg/rpcinfo"
    {{- if eq .Codec "thrift"}}
    "github.com/cloudwego/kitex/pkg/transmeta"
    {{- end }}
    "github.com/cloudwego/kitex/server"
    kitexlogrus "github.com/kitex-contrib/obs-opentelemetry/logging/logrus"
    "{{.Module}}/conf"
    "{{.ImportPath}}/{{ToLower .ServiceName}}"
    "go.uber.org/zap/zapcore"
    "gopkg.in/natefinch/lumberjack.v2"
  )

  func main() {
    dal.Init()
    query.SetDefault(mysql.DB)
    opts := kitexInit()

    svr := {{ToLower .ServiceName}}.NewServer(new({{.ServiceName}}Impl), opts...)

    err := svr.Run()
    if err != nil {
      klog.Error(err.Error())
    }
  }

  func kitexInit() (opts []server.Option) {
    // address
    addr, err := net.ResolveTCPAddr("tcp", conf.GetConf().Kitex.Address)
    if err != nil {
      panic(err)
    }
    opts = append(opts, server.WithServiceAddr(addr))

    // service info
    	opts = append(opts, server.WithServerBasicInfo(&rpcinfo.EndpointBasicInfo{
    		ServiceName: conf.GetConf().Kitex.Service,
    	}))

    {{- if eq .Codec "thrift"}}
     // thrift meta handler
     opts = append(opts, server.WithMetaHandler(transmeta.ServerTTHeaderHandler))
    {{- end}}

    // klog
    logger := kitexlogrus.NewLogger()
    klog.SetLogger(logger)
    klog.SetLevel(conf.LogLevel())
    klog.SetOutput(os.Stdout)
    return
  }
